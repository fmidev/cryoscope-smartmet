################################################################## 
# smartmet-tools-grid : filesys2smartmet
##################################################################

# This is a configuration file for "filesys2smartmet" program. 
# The program is used for synchronizing content information 
# in the Redis database according to the information stored 
# into the file system. 

##################################################################


# Importing global configuration parameters. There should be
# an environment variable SMARTMET_ENV_FILE that points to
# the global configuration file. The idea is that you can easily
# change your environment by editing this file. 

@ifdef SMARTMET_ENV_FILE
  @include "$(SMARTMET_ENV_FILE)"
@else
  @print "The environment variable 'SMARTMET_ENV_FILE' not defined!" @location
  @include "$(HOME)/workspace/smartmet-tools-grid/cfg/smartmet-dev-env.cfg"
@endif

# This information is needed for initializing the grid-library. 
#smartmet.library.grid-files.configFile = "$(GRID_FILES_LIBRARY_CONFIG_FILE)"
smartmet :
{
library :
{

grid-files :
{
  # Processing of grid/grib files requires a lot of configuration information. 
  # This information should be found from the file below. 

  configFile = "$(GRID_FILES_LIBRARY_CONFIG_FILE)"
  
  # If we want to scan S3 buckets then we have to use our own memoryMapper implementation. 
  # This implementation is able to map S3 files into the memory. However, the current
  # implementation does not not with old kernels (it does not work with RedHat7). 
  
  memoryMapper :
  {
    enabled = false
  }
}

} # library
}

smartmet :
{
tools :
{
grid :
{


filesys2smartmet :
{ 
  content-source : 
  { 
    # There might be different content sources that update information
    # in the content server. That's why they should have an unique identifier.
    
    source-id = 200
    
    
    # This file contains producer information that is needed when content information
    # is read from the filesys. Notice that this file might contain producer definitions
    # that are not necessary used during the update.
    producerDefFile = "/home/smartmet/config/libraries/tools-grid/producerDef.csv"
  
    locations = 
    (
      location :
      {
        type    = "FS"
        url     = "/srv/data/grib"
        
        authentication :
        {
          method = 0
          username = ""
          password = ""
        }
        
        patterns = 
        [    
          "*.nc",
          "*.grib",
          "*.grb",
          "*.grib2"
        ]
      },
      location :
      {
        type    = "S3"
        url     = "https://ecache.data.lit.fmi.fi/"
        
        authentication :
        {
          method = 0
          # method 1 would need key and secret key here
          username = ""
          password = ""
        }
        
        patterns = 
        [    
          "*.nc",
          "*.grib",
          "*.grib2",
          "*/FMI_*.grib",
          "*/FMI_*.grib2"
        ]
      }
    )    
    cacheDir = "/tmp"
    # Grib filenames should be in a fixed format (PROD_YYYYMMDDTHHMMSS_XXXXX.grib) . If this is 
    # not the case then we should call the LUA function, which returns the fixed filename that 
    # contains the required information. The filename itself is not changed. 
    
    filenameFixer : 
    {
      luaFilename = "%(DIR)/filenameFixer.lua"
      luaFunction = "fixFilename"
    }
    

    # This file is used for definingÂ which content should be preloaded into the memory
    # if possible. This means in practice that when new content entries are added into
    # the content server they can be marked with the "preload requested" flag. This is
    # how the data servers know which content should be preloaded. 
    
    preloadFile = "$(GRID_TOOLS_CONFIG_DIR)/preload.csv"
  }  


  # The "addFileInfoListWithContent" message can contain max this many records:

  maxMessageSize = 5000

  content-storage  : 
  {
    # Content storage type (redis/corba/http)
    
    type = "redis"

    redis :
    {
      lockEnabled  = false
      address      = "$(REDIS_CONTENT_SERVER_ADDRESS)"
      port         = $(REDIS_CONTENT_SERVER_PORT)
      tablePrefix  = "$(REDIS_CONTENT_SERVER_TABLE_PREFIX)"
    }
    
    corba :
    {
      ior          = "$(CORBA_CONTENT_SERVER_IOR)"
    }

    http :
    {
      url          = "$(HTTP_CONTENT_SERVER_URL)"
    }    
  }
  
  processing-log :
  {
    enabled      = true
    file         = "/dev/stdout"
#    file         = "$(GRID_TOOLS_LOG_DIR)/filesys2smartmet_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  debug-log :
  {
    enabled      = true
    file         = "/dev/stdout"
#    file         = "$(GRID_TOOLS_LOG_DIR)/filesys2smartmet_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
    
}


}
}
}
